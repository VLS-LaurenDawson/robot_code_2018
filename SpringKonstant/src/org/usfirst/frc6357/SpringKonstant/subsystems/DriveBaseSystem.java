// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6357.SpringKonstant.subsystems;

import org.usfirst.frc6357.SpringKonstant.Robot;
import org.usfirst.frc6357.SpringKonstant.commands.*;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveBaseSystem extends Subsystem // MARK: BreakPoint
{
    private final SpeedController frontLeft;
    private final SpeedController frontRight;
    private final Encoder leftEncoder;
    private final Encoder rightEncoder;
    private PIDController leftController;
    private PIDController rightController;
    
    private final double Kp = 0.1;
    private final double Kd = 0.0;
    private final double Ki = 0.0;
    
    private final double maxRobotSpeed = 9.5; //feet per second

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public DriveBaseSystem(SpeedController baseFrontLeft, SpeedController baseFrontRight, 
    					   Encoder baseLeftEncoder, Encoder baseRightEncoder)
    {
    	super();
        frontLeft = baseFrontLeft;
        frontRight = baseFrontRight;

        leftEncoder = baseLeftEncoder;
        rightEncoder = baseRightEncoder;
        
        leftEncoder.setPIDSourceType(PIDSourceType.kRate);
        rightEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        leftController = new PIDController(Kp, Ki, Kd, leftEncoder, frontLeft);
        rightController = new PIDController(Kp, Ki, Kd, rightEncoder, frontRight);
        
        leftController.enable();
        rightController.enable();
    }
    
    public void initDefaultCommand() 
    {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void setLeftMotorsPercent(double percent){
    	setLeftMotors(maxRobotSpeed*percent);
    }
    
    public void setRightMotorsPercent(double percent){
    	setRightMotors(maxRobotSpeed*percent);
    }
    
    public void setLeftMotors(double speed)
    {
    	leftController.setSetpoint(speed);
    }
    
    public void setRightMotors(double speed)
    {
    	rightController.setSetpoint(speed);
    }
}

