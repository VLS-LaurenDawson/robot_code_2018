// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6357.SpringKonstant;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap
{
   /*
    public static DoubleSolenoid doubleSolenoid1;
    public static SpeedController baseFrontLeft;
    public static SpeedController baseCenterLeft;
    public static SpeedController baseBackLeft;
    public static SpeedController baseFrontRight;
    public static SpeedController baseCenterRight;
    public static SpeedController baseBackRight;
    public static Compressor compressor1;
*/
    public static void init() 
    {
    	/*
    	compressor1 = new Compressor(0);
    	LiveWindow.addActuator("Compressor", "Compressor", compressor1);
    	
        doubleSolenoid1 = new DoubleSolenoid(0, 0, 1);										
        LiveWindow.addActuator("Gear Placement", "Double Solenoid 1", doubleSolenoid1);
       
        baseFrontLeft = new Talon(4);
        LiveWindow.addActuator("Base", "FrontLeft", (Talon) baseFrontLeft);
        
        baseCenterLeft = new Talon(2);
        LiveWindow.addActuator("Base", "Center Left", (Talon) baseCenterLeft);
        
        baseBackLeft = new Talon(0);
        LiveWindow.addActuator("Base", "Back Left", (Talon) baseBackLeft);
        
        baseFrontRight = new Talon(5);
        LiveWindow.addActuator("Base", "FrontRight", (Talon) baseFrontRight);
        
        baseCenterRight = new Talon(3);
        LiveWindow.addActuator("Base", "CetnerRight", (Talon) baseCenterRight);
        
        baseBackRight = new Talon(1);
        LiveWindow.addActuator("Base", "Back Right", (Talon) baseBackRight);
        */
    }
}
