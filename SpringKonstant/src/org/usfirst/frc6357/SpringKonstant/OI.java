// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6357.SpringKonstant;

import org.usfirst.frc6357.SpringKonstant.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6357.SpringKonstant.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI 
{
    //// CREATING BUTTONS TEST
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

	public Joystick driver, operator;
    public JoystickButton a, b, x, y;
    
    public OI() 
    {

        operator = new Joystick(1);
        driver = new Joystick(0);

        a = new JoystickButton(operator, 1);
        b = new JoystickButton(operator, 2);
        x = new JoystickButton(operator, 3);
        y = new JoystickButton(operator, 4);
        
        
        a.whenPressed(new ForwardGearDoubleSolenoid(Robot.gearDoubleSolenoidLeft, Robot.gearDoubleSolenoidRight));
        b.whenPressed(new ReverseGearDoubleSolenoid(Robot.gearDoubleSolenoidLeft, Robot.gearDoubleSolenoidRight));
        x.whenPressed(new GearDoubleSolenoidPush(Robot.gearDoubleSolenoidPush));
        //y.whenPressed(new ReverseGearDoubleSolenoid());
        

        // SmartDashboard Buttons
        //SmartDashboard.putData("GearDeployment", new ReverseGearDoubleSolenoid());
        //SmartDashboard.putData("GearPlacement", new ForwardGearDoubleSolenoid());
        //SmartDashboard.putData("RopeCatch", new RopeCatch());
        //SmartDashboard.putData("RopeClimb", new RopeClimb());
        //SmartDashboard.putData("AutoPlan1", new AutoPlan1());
        //SmartDashboard.putData("AutoPlan2", new AutoPlan2());
        //SmartDashboard.putData("AutoPlan3", new AutoPlan3());
        //SmartDashboard.putData("AutoPlan4", new AutoPlan4());
        //SmartDashboard.putData("AutoPlan5", new AutoPlan5());
        //SmartDashboard.putData("AutoPlan6", new AutoPlan6());

    }

    public Joystick getDriver() 
    {
        return driver;
    }

    public Joystick getOperator() 
    {
        return operator;
    }
}

