// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6357.SpringKonstant;

import org.usfirst.frc6357.SpringKonstant.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6357.SpringKonstant.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI 
{
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driver;
    public JoystickButton y;
    public JoystickButton x;
    public JoystickButton a;
    public JoystickButton b;
    public Joystick operator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operator = new Joystick(1);
        
        b = new JoystickButton(operator, 1);
        b.whileHeld(new Gear_Rtrv());
        a = new JoystickButton(operator, 1);
        a.whileHeld(new Gear_Plc());
        x = new JoystickButton(operator, 1);
        x.whileHeld(new Rope_Climb());
        y = new JoystickButton(operator, 1);
        y.whileHeld(new Rope_Catch());
        driver = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Gear_Rtrv", new Gear_Rtrv());
        SmartDashboard.putData("Gear_Plc", new Gear_Plc());
        SmartDashboard.putData("Rope_Catch", new Rope_Catch());
        SmartDashboard.putData("Rope_Climb", new Rope_Climb());
        SmartDashboard.putData("Auto_Plan_1", new Auto_Plan_1());
        SmartDashboard.putData("Auto_Plan_2", new Auto_Plan_2());
        SmartDashboard.putData("Auto_Plan_3", new Auto_Plan_3());
        SmartDashboard.putData("Auto_Plan_4", new Auto_Plan_4());
        SmartDashboard.putData("Auto_Plan_5", new Auto_Plan_5());
        SmartDashboard.putData("Auto_Plan_6", new Auto_Plan_6());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() 
    {
        return driver;
    }

    public Joystick getOperator() 
    {
        return operator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

