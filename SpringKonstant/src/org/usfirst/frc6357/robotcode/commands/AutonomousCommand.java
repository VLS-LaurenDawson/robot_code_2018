// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6357.robotcode.commands;

import edu.wpi.first.wpilibj.command.Command;
//import org.usfirst.frc6357.robotcode.Robot;

/**
 *
 */
public class AutonomousCommand extends Command
{
	public AutonomousCommand()
	{
		
	}
	
	/**
	 * Overloaded constructor, creates a commandgroup by parsing 2D string array for data
	 * @param s2d the 2D string array containing data from a csv for parsing with the format specified in CSVReader
	 */
    public AutonomousCommand(String[][] s2d)
    {
    	/*
    	 * Should read through the s2d for references and command types, then construct a command group
    	 * Format is: line[0] can be ignored, line[boo][0] is function name, line[foo][1 : line[foo].length - 1] are params
    	 * Afterwards, will execute command group
    	 */
    	
    	for(int row=1; row < s2d.length; row++)
    	{
    		switch(s2d[row][0])
    		{
    			case "Drive":
    				System.out.println("Add driving functionality here with param: " + s2d[row][1] + " ft");
    				break;
    			case "Turn":
    				System.out.println("Add turning functionality here with param: " + s2d[row][1] + " deg");
    				break;
    			default:
    				System.out.println("COMMAND UNRECOGNIZED ON LINE " + row);
    		}
    	}
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize()
    {

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute()
    {

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished()
    {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end()
    {

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted()
    {

    }
}
